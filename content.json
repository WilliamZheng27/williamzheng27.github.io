{"meta":{"title":"WilliamZheng's Blog","subtitle":null,"description":null,"author":"WilliamZheng","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Learn Vue","slug":"Learn-Vue","date":"2019-09-14T14:27:06.000Z","updated":"2019-09-14T19:41:19.473Z","comments":true,"path":"2019/09/14/Learn-Vue/","link":"","permalink":"http://yoursite.com/2019/09/14/Learn-Vue/","excerpt":"","text":"Vue学习笔记学习Vue也有一段时间了，这里写个Blog大致总结一下目前所学的知识，留作日后查询之用。 模板语法模板语法是用于在HTML中插值的语法 Mustache 语法123456789101112&lt;div id=\"app\"&gt; &#123;&#123;Message&#125;&#125;&lt;/div&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt;&lt;script&gt; const app = new Vue(&#123; el: '#app', data: &#123; Message: 'Hello World!' &#125; &#125;)&lt;/script&gt; v-text指令12345678910111213&lt;div id=\"app\"&gt; &#123;&#123;Message&#125;&#125; &lt;h2 v-text=\"Message\"&gt;&lt;/h2&gt;&lt;/div&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt;&lt;script&gt; const app = new Vue(&#123; el: '#app', data: &#123; Message: 'Hello World!' &#125; &#125;)&lt;/script&gt; v-html指令1234567891011121314&lt;div id=\"app\"&gt; &#123;&#123;Message&#125;&#125; &lt;div v-html=\"divMessage\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt;&lt;script&gt; const app = new Vue(&#123; el: '#app', data: &#123; Message: 'Hello World!', divMessage: '&lt;h2&gt;Hello World!&lt;/h2&gt;' &#125; &#125;)&lt;/script&gt; 计算属性与侦听器计算属性123456computed: &#123; // 计算属性的 getter reversedMessage: function () &#123; // `this` 指向 vm 实例 return this.message.split('').reverse().join('') &#125; 计算属性具有缓存 可以通过定义setter在更新计算属性时同时更新data属性 侦听器 在属性改变时执行操作 相比计算属性的好处是允许执行异步操作12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"&gt;&lt;/script&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"&gt;&lt;/script&gt;&lt;script&gt;var watchExampleVM = new Vue(&#123; el: '#watch-example', data: &#123; question: '', answer: 'I cannot give you an answer until you ask a question!' &#125;, watch: &#123; // 如果 `question` 发生改变，这个函数就会运行 question: function (newQuestion, oldQuestion) &#123; this.answer = 'Waiting for you to stop typing...' this.debouncedGetAnswer() &#125; &#125;, created: function () &#123; // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。 // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率 // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于 // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识， // 请参考：https://lodash.com/docs#debounce this.debouncedGetAnswer = _.debounce(this.getAnswer, 500) &#125;, methods: &#123; getAnswer: function () &#123; if (this.question.indexOf('?') === -1) &#123; this.answer = 'Questions usually contain a question mark. ;-)' return &#125; this.answer = 'Thinking...' var vm = this axios.get('https://yesno.wtf/api') .then(function (response) &#123; vm.answer = _.capitalize(response.data.answer) &#125;) .catch(function (error) &#123; vm.answer = 'Error! Could not reach the API. ' + error &#125;) &#125; &#125;&#125;)&lt;/script&gt; 数据绑定语法糖：英文冒号（:） 绑定类123456789101112131415161718&lt;div id=\"app\"&gt; &#123;&#123;Message&#125;&#125; &lt;div v-bind:class=\"&#123;active: true&#125;\"&gt;&#123;&#123;Message&#125;&#125;&lt;/div&gt;&lt;/div&gt;&lt;style&gt; .active&#123; color: red; &#125;&lt;/style&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt;&lt;script&gt; const app = new Vue(&#123; el: '#app', data: &#123; Message: 'Hello World!' &#125; &#125;)&lt;/script&gt; 绑定CSS12345678910111213141516171819&lt;div id=\"app\"&gt; &#123;&#123;Message&#125;&#125; &lt;div v-bind:class=\"&#123;active: true&#125;\"&gt;&#123;&#123;Message&#125;&#125;&lt;/div&gt; &lt;div v-bind:style=\"&#123;color: 'red'&#125;\"&gt;&#123;&#123;Message&#125;&#125;&lt;/div&gt;&lt;/div&gt;&lt;style&gt; .active&#123; color: red; &#125;&lt;/style&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt;&lt;script&gt; const app = new Vue(&#123; el: '#app', data: &#123; Message: 'Hello World!' &#125; &#125;)&lt;/script&gt; 条件渲染与列表渲染条件渲染 指令：v-if/v-show 区别：v-if会完全移除元素，v-show给元素添加invisible 应用：需要频繁显示隐藏的元素，使用v-show可以减小开销列表渲染 指令：v-for12345&lt;ul id=\"example-1\"&gt; &lt;li v-for=\"item in items\"&gt; &#123;&#123; item.message &#125;&#125; &lt;/li&gt;&lt;/ul&gt; 提供keykey可以保证元素的正确高效复用 123&lt;div v-for=\"item in items\" v-bind:key=\"item.id\"&gt; &lt;!-- 内容 --&gt;&lt;/div&gt; 数组更新检测 Vue不能检测通过下标更改的数组项 Vue不能监测数组大小的改变 Vue能够监测以下变异函数： push() pop() shift() unshift() splice() sort() reverse() 监听事件语法糖：英文@ 监听点击12345678910111213141516171819202122232425262728293031&lt;div id=\"app\"&gt; &#123;&#123;Message&#125;&#125; &lt;button @click=\"btnClick\"&gt;&lt;/button&gt; &lt;button @click=\"btnClickEvent($event)\"&gt;&lt;/button&gt; &lt;button @click=\"btnClickProps('props', $event)\"&gt;&lt;/button&gt;&lt;/div&gt;&lt;style&gt; .active&#123; color: red; &#125;&lt;/style&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt;&lt;script&gt; const app = new Vue(&#123; el: '#app', data: &#123; Message: 'Hello World!' &#125;, methods: &#123; btnClick: function()&#123; console.log('Button Clicked!'); &#125;, btnClickEvent: function(event)&#123; console.log(event); &#125;, btnClickProps: function(props, event)&#123; console.log(props, event); &#125; &#125; &#125;)&lt;/script&gt; 监听键盘事件 keyup keydown…事件修饰符 .stop .prevent .capture .self .once .passive 双向绑定 指令：v-model 实现：v-bind和v-listen的结合 注意：输入法组合期间默认不会触发更新文本12&lt;input v-model=\"message\" placeholder=\"edit me\"&gt;&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt; 多选框12345678910&lt;div id='example-3'&gt; &lt;input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\"&gt; &lt;label for=\"jack\"&gt;Jack&lt;/label&gt; &lt;input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\"&gt; &lt;label for=\"john\"&gt;John&lt;/label&gt; &lt;input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\"&gt; &lt;label for=\"mike\"&gt;Mike&lt;/label&gt; &lt;br&gt; &lt;span&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;&lt;/div&gt; 单选按钮123456789&lt;div id=\"example-4\"&gt; &lt;input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\"&gt; &lt;label for=\"one\"&gt;One&lt;/label&gt; &lt;br&gt; &lt;input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\"&gt; &lt;label for=\"two\"&gt;Two&lt;/label&gt; &lt;br&gt; &lt;span&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/span&gt;&lt;/div&gt; 选择框123456789&lt;div id=\"example-5\"&gt; &lt;select v-model=\"selected\"&gt; &lt;option disabled value=\"\"&gt;请选择&lt;/option&gt; &lt;option&gt;A&lt;/option&gt; &lt;option&gt;B&lt;/option&gt; &lt;option&gt;C&lt;/option&gt; &lt;/select&gt; &lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/span&gt;&lt;/div&gt; 修饰符 .lazy .number .trim","categories":[{"name":"Frontend","slug":"Frontend","permalink":"http://yoursite.com/categories/Frontend/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-09-14T03:29:22.758Z","updated":"2019-09-14T03:29:22.758Z","comments":true,"path":"2019/09/14/hello-world/","link":"","permalink":"http://yoursite.com/2019/09/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}